assingment 
Q1
import java.util.Scanner;

public class LinearSearch {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();

        int[] arr = new int[size];
        for (int i = 0; i < size; i++) {
            System.out.print("Enter element " + (i + 1) + ": ");
            arr[i] = scanner.nextInt();
        }

        System.out.print("Enter the element X to search: ");
        int x = scanner.nextInt();

        int index = linearSearch(arr, x);

        if (index != -1) {
            System.out.println("Element found at index " + index);
        } else {
            System.out.println("Element not found in array");
        }
    }

    private static int linearSearch(int[] arr, int x) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == x) {
                return i;
            }
        }
        return -1;
    }
}

Q2
import java.util.Scanner;

public class LastOccurrence {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();

        int[] arr = new int[size];
        for (int i = 0; i < size; i++) {
            System.out.print("Enter element " + (i + 1) + ": ");
            arr[i] = scanner.nextInt();
        }

        System.out.print("Enter the target element: ");
        int target = scanner.nextInt();

        int lastIndex = lastOccurrence(arr, target);

        System.out.println("Output: " + lastIndex);
    }

    private static int lastOccurrence(int[] arr, int target) {
        int lastIndex = -1;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                lastIndex = i;
            }
        }

        return lastIndex;
    }
}


Q3
import java.util.Scanner;

public class CountOnes {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the size of the binary array: ");
        int size = scanner.nextInt();

        int[] arr = new int[size];
        for (int i = 0; i < size; i++) {
            System.out.print("Enter element " + (i + 1) + ": ");
            arr[i] = scanner.nextInt();
        }

        int countOnes = countOnes(arr);

        System.out.println("Output: " + countOnes);
    }

    private static int countOnes(int[] arr) {
        int count = 0;
        int low = 0;
        int high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == 1) {
                count = arr.length - mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return count;
    }
}


Q4
import java.util.Scanner;

public class CountOccurrences {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();

        int[] nums = new int[size];
        for (int i = 0; i < size; i++) {
            System.out.print("Enter element " + (i + 1) + ": ");
            nums[i] = scanner.nextInt();
        }

        System.out.print("Enter the target element: ");
        int target = scanner.nextInt();

        int count = countOccurrences(nums, target);

        if (count != -1) {
            System.out.println("Target " + target + " occurs " + count + " times");
        } else {
            System.out.println("Target " + target + " not found in the array");
        }
    }

    private static int countOccurrences(int[] nums, int target) {
        int firstOccurrence = binarySearch(nums, target, true);

        if (firstOccurrence == -1) {
            return -1;
        }

        int lastOccurrence = binarySearch(nums, target, false);

        return lastOccurrence - firstOccurrence + 1;
    }

    private static int binarySearch(int[] nums, int target, boolean isFirst) {
        int result = -1;
        int low = 0;
        int high = nums.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (nums[mid] == target) {
                result = mid;

                if (isFirst) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return result;
    }
}


Q5

import java.util.Scanner;

public class PerfectSquare {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a positive integer: ");
        int num = scanner.nextInt();

        boolean isPerfectSquare = isPerfectSquare(num);

        System.out.println("Output: " + isPerfectSquare);
    }

    private static boolean isPerfectSquare(int num) {
        if (num < 0) {
            return false;
        }

        int sqrt = (int) Math.sqrt(num);

        return sqrt * sqrt == num;
    }
}

